# @format

version: '3.8'

services:
  mongodb_1:
    image: mongo:latest
    container_name: mongodb_1
    volumes:
      - mongodb_1-data:/data/db
      - mongodb_1-config:/data/configdb
      - ./backend/hosts/vps/infrastructure/mongodb/mongodb-keyfile:/opt/keyfiles/mongodb-keyfile
      - ./backend/hosts/vps/infrastructure/mongodb/mongodb-init.sh:/data/configdb/mongodb-init.sh
    ports:
      - 27017:27017
    command: /bin/bash -c "./data/configdb/mongodb-init.sh"
    networks:
      - kdmid-scheduler-network
    restart: always

  mongodb_2:
    image: mongo:latest
    container_name: mongodb_2
    volumes:
      - mongodb_2-data:/data/db
      - mongodb_2-config:/data/configdb
      - ./backend/hosts/vps/infrastructure/mongodb/mongodb-keyfile:/opt/keyfiles/mongodb-keyfile
      - ./backend/hosts/vps/infrastructure/mongodb/mongodb-init.sh:/data/configdb/mongodb-init.sh
    ports:
      - 27018:27017
    command: /bin/bash -c "./data/configdb/mongodb-init.sh"
    networks:
      - kdmid-scheduler-network
    restart: always

  mongodb_3:
    image: mongo:latest
    container_name: mongodb_3
    volumes:
      - mongodb_3-data:/data/db
      - mongodb_3-config:/data/configdb
      - ./backend/hosts/vps/infrastructure/mongodb/mongodb-keyfile:/opt/keyfiles/mongodb-keyfile
      - ./backend/hosts/vps/infrastructure/mongodb/mongodb-init.sh:/data/configdb/mongodb-init.sh
    ports:
      - 27019:27017
    command: /bin/bash -c "./data/configdb/mongodb-init.sh"
    networks:
      - kdmid-scheduler-network
    restart: always

  backend:
    image: kdmid-scheduler-backend
    container_name: backend
    build:
      context: ./backend
      dockerfile: ./hosts/vps/kdmid_scheduler-api/Dockerfile
    ports:
      - '8080:8080'
    env_file:
      - .env
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - MongoDbConnection__Host=mongodb_1
      - MongoDbConnection__User=${MONGODBCONNECTION_USERNAME}
      - MongoDbConnection__Password=${MONGODBCONNECTION_PASSWORD}
      - AntiCaptchaConnection__ApiKey=${ANTICAPTCHACONNECTION_APIKEY}
      - TelegramBotConnection__Token=${TELEGRAMBOTCONNECTION_TOKEN}
      - TelegramBotConnection__AdminChatId=${TELEGRAMBOTCONNECTION_ADMINCHATID}
      - Kdmid__WebAppUrl=${KDMID_WEBAPPURL}
    networks:
      - kdmid-scheduler-network
    depends_on:
      - mongodb_1
      - mongodb_2
      - mongodb_3
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=PathPrefix(`/api`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls=true'

  frontend:
    image: kdmid-scheduler-frontend
    container_name: frontend
    build:
      context: ./frontend/telegram-webapp
      dockerfile: ./Dockerfile
    ports:
      - '3000:3000'
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080
    networks:
      - kdmid-scheduler-network
    depends_on:
      - backend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=PathPrefix(`/`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls=true'

  traefik:
    image: traefik:v2.2
    container_name: traefik
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.selfsignedresolver.acme.tlschallenge=true'
      - '--certificatesresolvers.selfsignedresolver.acme.email=youremail@example.com'
      - '--certificatesresolvers.selfsignedresolver.acme.storage=/letsencrypt/acme.json'
      - '--certificatesresolvers.selfsignedresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory'
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend/hosts/vps/infrastructure/traefik/letsencrypt:/letsencrypt
    networks:
      - kdmid-scheduler-network
    restart: always

networks:
  kdmid-scheduler-network: {}

volumes:
  mongodb_1-data:
  mongodb_2-data:
  mongodb_3-data:
  mongodb_1-config:
  mongodb_2-config:
  mongodb_3-config:
